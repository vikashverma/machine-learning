package mocks

import (
	"github.com/cdipaolo/goml/base"
	"github.com/stretchr/testify/mock"
)

// MockLeastSquaresRegression is an autogenerated mock type for the LeastSquaresRegression type
type MockLeastSquaresRegression struct {
	mock.Mock
}

// Dij provides a mock function with given fields: i, j
func (m *MockLeastSquaresRegression) Dij(i int, j int) (float64, error) {
	ret := m.Called(i, j)
	return ret.Get(0).(float64), ret.Error(1)
}

// Dj provides a mock function with given fields: j
func (m *MockLeastSquaresRegression) Dj(j int) (float64, error) {
	ret := m.Called(j)
	return ret.Get(0).(float64), ret.Error(1)
}

// Examples provides a mock function with given fields:
func (m *MockLeastSquaresRegression) Examples() int {
	ret := m.Called()
	return ret.Get(0).(int)
}

// J provides a mock function with given fields:
func (m *MockLeastSquaresRegression) J() (float64, error) {
	ret := m.Called()
	return ret.Get(0).(float64), ret.Error(1)
}

// Learn provides a mock function with given fields:
func (m *MockLeastSquaresRegression) Learn() error {
	ret := m.Called()
	return ret.Error(0)
}

// LearningRate provides a mock function with given fields:
func (m *MockLeastSquaresRegression) LearningRate() float64 {
	ret := m.Called()
	return ret.Get(0).(float64)
}

// MaxIterations provides a mock function with given fields:
func (m *MockLeastSquaresRegression) MaxIterations() int {
	ret := m.Called()
	return ret.Get(0).(int)
}

// OnlineLearn provides a mock function with given fields: errors, dataset, onUpdate, normalize
func (m *MockLeastSquaresRegression) OnlineLearn(errors chan error, dataset chan base.Datapoint, onUpdate func([][]float64), normalize ...bool) {
	m.Called(errors, dataset, onUpdate, normalize)
}

// PersistToFile provides a mock function with given fields: path
func (m *MockLeastSquaresRegression) PersistToFile(path string) error {
	ret := m.Called(path)
	return ret.Error(0)
}

// Predict provides a mock function with given fields: x, normalize
func (m *MockLeastSquaresRegression) Predict(x []float64, normalize ...bool) ([]float64, error) {
	ret := m.Called(x, normalize)

	var result []float64
	if ret.Get(0) != nil {
		result = ret.Get(0).([]float64)
	}
	return result, ret.Error(1)
}

// RestoreFromFile provides a mock function with given fields: path
func (m *MockLeastSquaresRegression) RestoreFromFile(path string) error {
	ret := m.Called(path)
	return ret.Error(0)
}

// String provides a mock function with given fields:
func (m *MockLeastSquaresRegression) String() string {
	ret := m.Called()
	return ret.Get(0).(string)
}

// Theta provides a mock function with given fields:
func (m *MockLeastSquaresRegression) Theta() []float64 {
	ret := m.Called()

	var theta []float64
	if ret.Get(0) != nil {
		theta = ret.Get(0).([]float64)
	}
	return theta
}

// UpdateLearningRate provides a mock function with given fields: a
func (m *MockLeastSquaresRegression) UpdateLearningRate(a float64) {
	m.Called(a)
}

// UpdateTrainingSet provides a mock function with given fields: trainingSet, expectedResults
func (m *MockLeastSquaresRegression) UpdateTrainingSet(trainingSet [][]float64, expectedResults []float64) error {
	ret := m.Called(trainingSet, expectedResults)
	return ret.Error(0)
}
